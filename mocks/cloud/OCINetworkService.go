// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/oracle/oci-go-sdk/v65/core"
	mock "github.com/stretchr/testify/mock"

	types "github.com/doitintl/kubeip/internal/types"
)

// OCINetworkService is an autogenerated mock type for the OCINetworkService type
type OCINetworkService struct {
	mock.Mock
}

type OCINetworkService_Expecter struct {
	mock *mock.Mock
}

func (_m *OCINetworkService) EXPECT() *OCINetworkService_Expecter {
	return &OCINetworkService_Expecter{mock: &_m.Mock}
}

// DeletePublicIP provides a mock function with given fields: ctx, publicIPOCID
func (_m *OCINetworkService) DeletePublicIP(ctx context.Context, publicIPOCID string) error {
	ret := _m.Called(ctx, publicIPOCID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicIP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, publicIPOCID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OCINetworkService_DeletePublicIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePublicIP'
type OCINetworkService_DeletePublicIP_Call struct {
	*mock.Call
}

// DeletePublicIP is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIPOCID string
func (_e *OCINetworkService_Expecter) DeletePublicIP(ctx interface{}, publicIPOCID interface{}) *OCINetworkService_DeletePublicIP_Call {
	return &OCINetworkService_DeletePublicIP_Call{Call: _e.mock.On("DeletePublicIP", ctx, publicIPOCID)}
}

func (_c *OCINetworkService_DeletePublicIP_Call) Run(run func(ctx context.Context, publicIPOCID string)) *OCINetworkService_DeletePublicIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OCINetworkService_DeletePublicIP_Call) Return(_a0 error) *OCINetworkService_DeletePublicIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OCINetworkService_DeletePublicIP_Call) RunAndReturn(run func(context.Context, string) error) *OCINetworkService_DeletePublicIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrimaryPrivateIPOfVnic provides a mock function with given fields: ctx, vnicOCID
func (_m *OCINetworkService) GetPrimaryPrivateIPOfVnic(ctx context.Context, vnicOCID string) (*core.PrivateIp, error) {
	ret := _m.Called(ctx, vnicOCID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimaryPrivateIPOfVnic")
	}

	var r0 *core.PrivateIp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.PrivateIp, error)); ok {
		return rf(ctx, vnicOCID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.PrivateIp); ok {
		r0 = rf(ctx, vnicOCID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.PrivateIp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, vnicOCID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCINetworkService_GetPrimaryPrivateIPOfVnic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrimaryPrivateIPOfVnic'
type OCINetworkService_GetPrimaryPrivateIPOfVnic_Call struct {
	*mock.Call
}

// GetPrimaryPrivateIPOfVnic is a helper method to define mock.On call
//   - ctx context.Context
//   - vnicOCID string
func (_e *OCINetworkService_Expecter) GetPrimaryPrivateIPOfVnic(ctx interface{}, vnicOCID interface{}) *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call {
	return &OCINetworkService_GetPrimaryPrivateIPOfVnic_Call{Call: _e.mock.On("GetPrimaryPrivateIPOfVnic", ctx, vnicOCID)}
}

func (_c *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call) Run(run func(ctx context.Context, vnicOCID string)) *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call) Return(_a0 *core.PrivateIp, _a1 error) *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call) RunAndReturn(run func(context.Context, string) (*core.PrivateIp, error)) *OCINetworkService_GetPrimaryPrivateIPOfVnic_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrimaryVnic provides a mock function with given fields: ctx, vnicAttachments
func (_m *OCINetworkService) GetPrimaryVnic(ctx context.Context, vnicAttachments []core.VnicAttachment) (*core.Vnic, error) {
	ret := _m.Called(ctx, vnicAttachments)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimaryVnic")
	}

	var r0 *core.Vnic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []core.VnicAttachment) (*core.Vnic, error)); ok {
		return rf(ctx, vnicAttachments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []core.VnicAttachment) *core.Vnic); ok {
		r0 = rf(ctx, vnicAttachments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Vnic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []core.VnicAttachment) error); ok {
		r1 = rf(ctx, vnicAttachments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCINetworkService_GetPrimaryVnic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrimaryVnic'
type OCINetworkService_GetPrimaryVnic_Call struct {
	*mock.Call
}

// GetPrimaryVnic is a helper method to define mock.On call
//   - ctx context.Context
//   - vnicAttachments []core.VnicAttachment
func (_e *OCINetworkService_Expecter) GetPrimaryVnic(ctx interface{}, vnicAttachments interface{}) *OCINetworkService_GetPrimaryVnic_Call {
	return &OCINetworkService_GetPrimaryVnic_Call{Call: _e.mock.On("GetPrimaryVnic", ctx, vnicAttachments)}
}

func (_c *OCINetworkService_GetPrimaryVnic_Call) Run(run func(ctx context.Context, vnicAttachments []core.VnicAttachment)) *OCINetworkService_GetPrimaryVnic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]core.VnicAttachment))
	})
	return _c
}

func (_c *OCINetworkService_GetPrimaryVnic_Call) Return(_a0 *core.Vnic, _a1 error) *OCINetworkService_GetPrimaryVnic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCINetworkService_GetPrimaryVnic_Call) RunAndReturn(run func(context.Context, []core.VnicAttachment) (*core.Vnic, error)) *OCINetworkService_GetPrimaryVnic_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicIP provides a mock function with given fields: ctx, publicIPOCID
func (_m *OCINetworkService) GetPublicIP(ctx context.Context, publicIPOCID string) (*core.PublicIp, error) {
	ret := _m.Called(ctx, publicIPOCID)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicIP")
	}

	var r0 *core.PublicIp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.PublicIp, error)); ok {
		return rf(ctx, publicIPOCID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.PublicIp); ok {
		r0 = rf(ctx, publicIPOCID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.PublicIp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publicIPOCID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCINetworkService_GetPublicIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicIP'
type OCINetworkService_GetPublicIP_Call struct {
	*mock.Call
}

// GetPublicIP is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIPOCID string
func (_e *OCINetworkService_Expecter) GetPublicIP(ctx interface{}, publicIPOCID interface{}) *OCINetworkService_GetPublicIP_Call {
	return &OCINetworkService_GetPublicIP_Call{Call: _e.mock.On("GetPublicIP", ctx, publicIPOCID)}
}

func (_c *OCINetworkService_GetPublicIP_Call) Run(run func(ctx context.Context, publicIPOCID string)) *OCINetworkService_GetPublicIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OCINetworkService_GetPublicIP_Call) Return(_a0 *core.PublicIp, _a1 error) *OCINetworkService_GetPublicIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCINetworkService_GetPublicIP_Call) RunAndReturn(run func(context.Context, string) (*core.PublicIp, error)) *OCINetworkService_GetPublicIP_Call {
	_c.Call.Return(run)
	return _c
}

// ListPublicIps provides a mock function with given fields: ctx, request, filters
func (_m *OCINetworkService) ListPublicIps(ctx context.Context, request *core.ListPublicIpsRequest, filters *types.OCIFilters) ([]core.PublicIp, error) {
	ret := _m.Called(ctx, request, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListPublicIps")
	}

	var r0 []core.PublicIp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListPublicIpsRequest, *types.OCIFilters) ([]core.PublicIp, error)); ok {
		return rf(ctx, request, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.ListPublicIpsRequest, *types.OCIFilters) []core.PublicIp); ok {
		r0 = rf(ctx, request, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PublicIp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.ListPublicIpsRequest, *types.OCIFilters) error); ok {
		r1 = rf(ctx, request, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCINetworkService_ListPublicIps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPublicIps'
type OCINetworkService_ListPublicIps_Call struct {
	*mock.Call
}

// ListPublicIps is a helper method to define mock.On call
//   - ctx context.Context
//   - request *core.ListPublicIpsRequest
//   - filters *types.OCIFilters
func (_e *OCINetworkService_Expecter) ListPublicIps(ctx interface{}, request interface{}, filters interface{}) *OCINetworkService_ListPublicIps_Call {
	return &OCINetworkService_ListPublicIps_Call{Call: _e.mock.On("ListPublicIps", ctx, request, filters)}
}

func (_c *OCINetworkService_ListPublicIps_Call) Run(run func(ctx context.Context, request *core.ListPublicIpsRequest, filters *types.OCIFilters)) *OCINetworkService_ListPublicIps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.ListPublicIpsRequest), args[2].(*types.OCIFilters))
	})
	return _c
}

func (_c *OCINetworkService_ListPublicIps_Call) Return(_a0 []core.PublicIp, _a1 error) *OCINetworkService_ListPublicIps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCINetworkService_ListPublicIps_Call) RunAndReturn(run func(context.Context, *core.ListPublicIpsRequest, *types.OCIFilters) ([]core.PublicIp, error)) *OCINetworkService_ListPublicIps_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePublicIP provides a mock function with given fields: ctx, publicIPOCID, privateIPOCID
func (_m *OCINetworkService) UpdatePublicIP(ctx context.Context, publicIPOCID string, privateIPOCID string) error {
	ret := _m.Called(ctx, publicIPOCID, privateIPOCID)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicIP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, publicIPOCID, privateIPOCID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OCINetworkService_UpdatePublicIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePublicIP'
type OCINetworkService_UpdatePublicIP_Call struct {
	*mock.Call
}

// UpdatePublicIP is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIPOCID string
//   - privateIPOCID string
func (_e *OCINetworkService_Expecter) UpdatePublicIP(ctx interface{}, publicIPOCID interface{}, privateIPOCID interface{}) *OCINetworkService_UpdatePublicIP_Call {
	return &OCINetworkService_UpdatePublicIP_Call{Call: _e.mock.On("UpdatePublicIP", ctx, publicIPOCID, privateIPOCID)}
}

func (_c *OCINetworkService_UpdatePublicIP_Call) Run(run func(ctx context.Context, publicIPOCID string, privateIPOCID string)) *OCINetworkService_UpdatePublicIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OCINetworkService_UpdatePublicIP_Call) Return(_a0 error) *OCINetworkService_UpdatePublicIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OCINetworkService_UpdatePublicIP_Call) RunAndReturn(run func(context.Context, string, string) error) *OCINetworkService_UpdatePublicIP_Call {
	_c.Call.Return(run)
	return _c
}

// NewOCINetworkService creates a new instance of OCINetworkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOCINetworkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OCINetworkService {
	mock := &OCINetworkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
