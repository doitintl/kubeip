// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/oracle/oci-go-sdk/v65/core"
	mock "github.com/stretchr/testify/mock"
)

// OCIInstanceService is an autogenerated mock type for the OCIInstanceService type
type OCIInstanceService struct {
	mock.Mock
}

type OCIInstanceService_Expecter struct {
	mock *mock.Mock
}

func (_m *OCIInstanceService) EXPECT() *OCIInstanceService_Expecter {
	return &OCIInstanceService_Expecter{mock: &_m.Mock}
}

// ListVnicAttachments provides a mock function with given fields: ctx, compartmentOCID, instanceOCID
func (_m *OCIInstanceService) ListVnicAttachments(ctx context.Context, compartmentOCID string, instanceOCID string) ([]core.VnicAttachment, error) {
	ret := _m.Called(ctx, compartmentOCID, instanceOCID)

	if len(ret) == 0 {
		panic("no return value specified for ListVnicAttachments")
	}

	var r0 []core.VnicAttachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]core.VnicAttachment, error)); ok {
		return rf(ctx, compartmentOCID, instanceOCID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []core.VnicAttachment); ok {
		r0 = rf(ctx, compartmentOCID, instanceOCID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.VnicAttachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, compartmentOCID, instanceOCID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCIInstanceService_ListVnicAttachments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVnicAttachments'
type OCIInstanceService_ListVnicAttachments_Call struct {
	*mock.Call
}

// ListVnicAttachments is a helper method to define mock.On call
//   - ctx context.Context
//   - compartmentOCID string
//   - instanceOCID string
func (_e *OCIInstanceService_Expecter) ListVnicAttachments(ctx interface{}, compartmentOCID interface{}, instanceOCID interface{}) *OCIInstanceService_ListVnicAttachments_Call {
	return &OCIInstanceService_ListVnicAttachments_Call{Call: _e.mock.On("ListVnicAttachments", ctx, compartmentOCID, instanceOCID)}
}

func (_c *OCIInstanceService_ListVnicAttachments_Call) Run(run func(ctx context.Context, compartmentOCID string, instanceOCID string)) *OCIInstanceService_ListVnicAttachments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OCIInstanceService_ListVnicAttachments_Call) Return(_a0 []core.VnicAttachment, _a1 error) *OCIInstanceService_ListVnicAttachments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCIInstanceService_ListVnicAttachments_Call) RunAndReturn(run func(context.Context, string, string) ([]core.VnicAttachment, error)) *OCIInstanceService_ListVnicAttachments_Call {
	_c.Call.Return(run)
	return _c
}

// NewOCIInstanceService creates a new instance of OCIInstanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOCIInstanceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OCIInstanceService {
	mock := &OCIInstanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
